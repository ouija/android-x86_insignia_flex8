diff -Naur a/sound/soc/codecs/rt5651.c b/sound/soc/codecs/rt5651.c
--- a/sound/soc/codecs/rt5651.c	2019-08-04 14:33:59.986530419 -0600
+++ b/sound/soc/codecs/rt5651.c	2019-08-04 14:35:05.250202923 -0600
@@ -9,6 +9,8 @@
  * published by the Free Software Foundation.
  */
 
+#define DEBUG
+
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/init.h>
@@ -28,6 +30,9 @@
 #include <sound/tlv.h>
 #include <sound/jack.h>
 
+#include <linux/dmi.h>
+#include <linux/gpio/consumer.h>
+
 #include "rl6231.h"
 #include "rt5651.h"
 
@@ -1977,6 +1982,31 @@
 	.use_single_rw = true,
 };
 
+// Insignia Flex devices retain a hardware speaker mute		
+// switch that was actually an output mux in earlier board revisions utilizing		
+// a different codec. Just unconditionally enable it; it's no longer used		
+// for muxing. The second GPIO (hpint) may or may not still be used for that		
+// purpose (TODO)		
+static const struct dmi_system_id insignia_flex[] = {		
+#if defined(CONFIG_DMI) && defined(CONFIG_X86)		
+	{		
+		.ident = "Insignia Flex Tablets",		
+		.matches = {		
+			DMI_MATCH(DMI_SYS_VENDOR, "Insignia"),		
+			DMI_MATCH(DMI_BOARD_NAME, "Cherry Trail CR")		
+		}		
+	},		
+#endif		
+	{}		
+};		
+static const struct acpi_gpio_params flex_rt5651_gpio_speaker_amp = { 1, 0, false };		
+static const struct acpi_gpio_params flex_rt5651_gpio_hpint = { 1, 0, false };		
+static const struct acpi_gpio_mapping flex_rt5651_gpios_map[] = {		
+	{ "speaker-amp-gpios", &flex_rt5651_gpio_speaker_amp, 1 },		
+	{ "hpint-gpios", &flex_rt5651_gpio_hpint, 1 },		
+	{ },		
+};
+
 #if defined(CONFIG_OF)
 static const struct of_device_id rt5651_of_match[] = {
 	{ .compatible = "realtek,rt5651", },
@@ -2009,6 +2039,8 @@
 	struct rt5651_priv *rt5651;
 	int ret;
 
+	struct gpio_desc *gpiod_speaker_amp;
+
 	rt5651 = devm_kzalloc(&i2c->dev, sizeof(*rt5651),
 				GFP_KERNEL);
 	if (NULL == rt5651)
@@ -2041,6 +2073,30 @@
 	rt5651->irq = i2c->irq;
 	rt5651->hp_mute = 1;
 
+	if (dmi_check_system(insignia_flex) && ACPI_HANDLE(&i2c->dev)) {
+		dev_dbg(&i2c->dev, "Applying Insignia Flex gpios quirk\n");
+		ret = devm_acpi_dev_add_driver_gpios(&i2c->dev, flex_rt5651_gpios_map);
+		if (ret != 0)
+			return ret; // FIXME: cleanup?
+	}
+
+	gpiod_speaker_amp = devm_gpiod_get_optional(&i2c->dev, "speaker-amp", GPIOD_ASIS);
+	if (IS_ERR(gpiod_speaker_amp)) {
+		ret = PTR_ERR(gpiod_speaker_amp);
+		dev_err(&i2c->dev, "Failed to get speaker-amp GPIO: %d\n", ret);
+		return ret; // FIXME: cleanup?
+	}
+
+	if (gpiod_speaker_amp) {
+		if (gpiod_export(gpiod_speaker_amp, false) < 0) {
+			dev_err(&i2c->dev, "Failed to export speaker-amp GPIO!\n");
+		} else {
+			dev_dbg(&i2c->dev, "Exported speaker-amp GPIO to sysfs!\n");
+		}
+
+		gpiod_set_value(gpiod_speaker_amp, 1); //always enable
+	}
+
 	INIT_WORK(&rt5651->jack_detect_work, rt5651_jack_detect_work);
 
 	/* Make sure work is stopped on probe-error / remove */
@@ -2068,4 +2124,4 @@
 
 MODULE_DESCRIPTION("ASoC RT5651 driver");
 MODULE_AUTHOR("Bard Liao <bardliao@realtek.com>");
-MODULE_LICENSE("GPL v2");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
